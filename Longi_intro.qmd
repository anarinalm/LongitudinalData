# Longitudinal Data Analysis {#sec-longi-intro .unnumbered}
```{r setup, include=FALSE, echo=TRUE}
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
knitr::opts_chunk$set(fig.height = 4)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.align="center")
`%notin%` <- Negate(`%in%`)
library(kableExtra)
```
## Data Structure

```{r, warning=FALSE}
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(haven))
```

The most important part of any statistical analysis begins with loading the data into Rstudio. Data can
come in many forms with two popular ones being csv (comma separated values) and dta. Below we show
different methods for how to load the data into RStudio.

### Loading CSV files

#### Using base R

The following method is a pretty standard way of loading csv files into R. It requires no
external packages (this is already a base R function) and works as follows. First, specify the location of your
data, and put it into function as an input. 
```{r}
TLC <- read.csv("Data/TLC.csv")
```

We can then get a look at the data by using the head function which provides us with a sneak peek of
the first n rows.
```{r}
head(TLC, n = 10)
```

#### Using the readr package

The next method requires the use of the readr package. It works exactly the same as read.csv, save for
the fact that it is faster than read.csv.
```{r}
library(readr)
TLC <- read_csv("Data/TLC.csv")
```

We can also print the first few rows to take a look of our data using function `head`, here we print the first 10 rows of the data.
```{r}
head(TLC, n = 10)
```

#### Using the data.table package

If we have large datasets, we can use the fread function in the data.table package to read the data faster compared to the other methods above, and we print the first 5 rows of the data.
```{r}
library(data.table)
TLC <- fread("Data/TLC.csv")
head(TLC, n = 5)
```


### Loading dta files
We can also read files in other formats from other software (STATA, SPSS, SAS, etc). Here we will explore reading dta files which is used in STATA software. In order to load these into Rstudio we need to use a package known as haven. The haven package has a function known as `read_dta()` which serves a similar purpose as `read.csv()`, `read_csv()` and `fread()`.
```{r}
TLCdta <- read_dta("Data/TLC.dta")
head(TLCdta, n = 15)
```


## Converting between data formats (wide and long format)

For the most part there are two formats that your data can come in. The wide format and the long format. The long format is when patients within the data have more than one observation. In other words, each row is snapshot into a subject's history at a specific time point. In the case of our data, each subject has four observations corresponding to their four lead measurements (initial measurement, 1 week measurement, 4 week measurement, and 6 week measurement). The code below details how to convert from wide format to long format.

The arguments to `gather()`:

* `data`: Data object (e.g. the data object here is TLC).
* `key`: Name of new key column (made from names of data columns).
* `value`: Name of new value column.
* `...`: Names of source columns that contain values.
* `factor_key`: Treat the new key column as a factor (instead of character vector).


Then, we print the first 16 rows of the long format TLC data.
```{r}
long_TLC <- tidyr::gather(TLC, level, measurements, lead0:lead6, factor_key=TRUE)
long_TLC <- long_TLC[order(long_TLC$id),]
head(long_TLC,n=16)
```

The wide format is when each row corresponds to a unique subject. The below shows one how to convert from long format to wide.

The arguments to `spread()`:

* `data`: Data object.
* `key`: Name of column containing the new column names.
* `value`: Name of column containing values.

Then, we print the first 10 rows of the converted wide format TLC data which should be same as our original data.
```{r}
wide_TLC <- spread(long_TLC, level, measurements)
head(wide_TLC, n = 10)
```
