# Exploratory Data Analysis {#sec-longi-EDA}

**Learning Objectives**

1. Understand how to conduct exploratory data analysis for longitudinal data.

2. Understand how to create plots to visualize trends over time and interpret results.

3. Understand how to calculate descriptive statistics (mean, standard deviation, variance-covariance matrix, correlation matrix) and interpret results.

4. Understand how to identify characteristics of longitudinal data.

## Converting between data formats (wide and long format)

```{r setup, include=FALSE, echo=TRUE}
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
knitr::opts_chunk$set(fig.height = 4)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.align="center")
`%notin%` <- Negate(`%in%`)
```

```{r, echo=FALSE, warning=FALSE}
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(haven))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(GGally))
suppressPackageStartupMessages(library(kableExtra))
```

```{r, echo=FALSE}
TLC <- read.csv("Data/TLC.csv")
```

For the most part there are two formats that your data can come in. The wide format and the long format. The long format is when patients within the data have more than one observation. In other words, each row is snapshot into a subject's history at a specific time point. In the case of our data, each subject has four observations corresponding to their four lead measurements (initial measurement, 1 week measurement, 4 week measurement, and 6 week measurement). The code below details how to convert from wide format to long format.

The arguments to `gather()`:

-   `data`: Data object (e.g. the data object here is TLC).
-   `key`: Name of new key column (made from names of data columns).
-   `value`: Name of new value column.
-   `...`: Names of source columns that contain values.
-   `factor_key`: Treat the new key column as a factor (instead of character vector).

Then, we print the first 16 rows of the long format TLC data.

```{r}
long_TLC <- tidyr::gather(TLC, level, measurements, lead0:lead6, factor_key=TRUE)
long_TLC <- long_TLC[order(long_TLC$id),]
head(long_TLC,n=16)
```

The wide format is when each row corresponds to a unique subject. The below shows one how to convert from long format to wide.

The arguments to `spread()`:

-   `data`: Data object.
-   `key`: Name of column containing the new column names.
-   `value`: Name of column containing values.

Then, we print the first 10 rows of the converted wide format TLC data which should be same as our original data.

```{r}
wide_TLC <- spread(long_TLC, level, measurements)
head(wide_TLC, n = 10)
```

## Graphical Representation of Longitudinal Data

In this section we will create some visual representations of the data. While this is possible to do in base R, we will use ggplot. The plots look nicer and it is a reliable tool for making data visualizations. We will begin by plotting the blood lead level (BLL) trajectories for the first seven subjects.

### Individual Trajectory Plot

We need to utilize `ggplot` package to graph the individual trajectory plot. Before that, we firstly make some modification on our data. We create a new numeric column named `time` corresponding to the `level` column which represents the number of weeks for the measurement as our x-axis timing variable. Next, we convert the `id` column into factor so we can have each individual as a group.

```{r}
# create a new numeric timing variable
long_TLC$time <- c(0,1,4,6)[long_TLC$level]

# convert the id column into factor for grouping
long_TLC$id <- as.factor(long_TLC$id)
```

Next, we are reading to graph the individual trajectory plot, and we only focus on the first 7 id's individual.

```{r}
# create plot
lead_trajectories <- ggplot(data = long_TLC[(long_TLC[,"id"] %in% 1:7), ]) + #only focus on id's 1-7
  geom_line(aes(x = time, y = measurements, color = id, group = id),size = 1.7) + 
  theme(axis.line = element_line(colour = "black", size = 2),
        text = element_text(size = 20),
        axis.text = element_text(colour = "black", size = 16, face = "bold"),
        axis.title = element_text(size = 16, face="bold"),
        axis.ticks.length = unit(.25, "cm"),
        axis.ticks = element_line(colour = "black", size = 1.5),
        legend.background = element_blank()) +
  scale_color_manual(name = "ID", values = c("green", "red", "purple", "blue",
                                             "yellow", "pink", "orange"),
                     labels = sapply(1:7, function(x) paste0("id", " = ", x))) +
  ylab(~ paste("Blood Lead levels (", mu, "g/dL)")) +
  xlab("Time (weeks)")

# print the individual trajectory plot
print(lead_trajectories)
```

### Scatter Plot

Next, we create a scatter plot to evaluate BLL over time. We stratify the data by group.

```{r}
long_TLC$factor_time <- as.factor(long_TLC$time)

#create plot
lead_point_plot <- ggplot(long_TLC, 
                          aes(x = factor_time, y = measurements, color = group)) + 
  geom_point() + 
  facet_wrap(.~group) + # this allows us to make separate boxes for the groups
  theme(axis.line = element_line(colour = "black", size = 2),
        text = element_text(size = 20),
        axis.text = element_text(colour = "black", size = 16, face="bold"),
        axis.title = element_text(size = 16, face = "bold"),
        axis.ticks.length=unit(.25, "cm"),
        axis.ticks = element_line(colour = "black", size = 1.5)) + 
  ylab(~ paste("Blood Lead levels (", mu, "g/dL)")) + 
  xlab("Time (weeks)")

# print the scatter plot
print(lead_point_plot)
```

### Mean Plot

To plot averages over time, we first summarize the data. Here we summarize count, mean, standard deviation (SD) and variance of blood lead levels over time (or for each occasion).

```{r}
#create table summarizing the blood lead levels
lead_overall_summary <- long_TLC %>%
  group_by(time) %>% #CHECK
  summarise(n = (length(measurements) - sum(is.na(measurements))),
            mean = round(mean(measurements, na.rm = T), 3),
            sd = round(sd(measurements, na.rm = T), 3),
            var = round(var(measurements, na.rm = T), 3))

#output table for overall averages
lead_overall_summary %>%
  mutate_all(linebreak) %>%
  kbl(caption = "Summary of average lead levels from TLC study",
      col.names=linebreak(c("Time","N", "Mean", "SD", "Variance")),
      booktabs=T, escape=F, align = "c") %>%
  kable_styling(full_width = FALSE, latex_options = c('hold_position'))
```

Next, we create a plot of means.

```{r}
lead_mean_plot <- ggplot(data = lead_overall_summary, aes(x = time, y = mean)) + 
  geom_point(size = 2) + 
  geom_line(size = 2) +
  ylab(~ paste("Lead levels (", mu, "g/dL)")) +
  xlab("Time (weeks)")

#print the mean plot
print(lead_mean_plot)
```

### Box Plot

Another helpful method of visualizing the data is to use a boxplot. A boxplot is a standardized way of displaying the distribution of data based on five statistics: The minimum (bottom line), the 1st quartile (bottom of the box), the median (the line inside the box), the 3rd quartile (top of the box) and the maximum (top line). Sometimes you will encounter values that are above the maximum or below the minimum. These are known as outliers. This theoretically shouldn't be true, but it occurs due to how the min and max are defined. The maximum is defined as the third quartile plus 1.5 times the InterQuartile Range (3rd quartile minus 1st quartile), and the minimum is defined as the 1st quartile minus 1.5 times the IQR.

```{r}
lead_box_plot <- ggplot(long_TLC, aes(x = factor_time, y = measurements, fill = group)) +
  geom_boxplot() +
  facet_wrap(.~group) + #this is what allows us to make separate boxes for the groups
  theme(axis.line = element_line(colour = "black", linewidth = 2),
        text = element_text(size = 20),
        axis.text = element_text(colour = "black", size = 20, face = "bold"),
        axis.title = element_text(size = 24, face ="bold"),
        axis.ticks.length=unit(.25, "cm"),
        axis.ticks = element_line(colour = "black", linewidth = 1.5)) +
  ylab(~ paste(" Lead levels ( ", mu, "g/dL )")) +
  xlab("Time (weeks)")

# print the boxplot
print(lead_box_plot)
```

### Correlation Plot

Next, we can create a correlation plot using `GGally` package.

```{r}
ggpairs(TLC, columns = c(2:5))
```

## Descriptive statistics for longitudinal data
In this section we will calculate some summary statistics for our continuous covariates. For simplicity I will be using the wide format of the data since every observation (i.e. row) will correspond to a unique id. There are many functions in R which will calculate any type of summary statistics you can think of. The most general is the summary() function in base R which calculates the minimum, 1st Quartile (25% Percentile), Median, Mean, 3rd Quartile (75%) and Maximum.

### Calculate summary statistics by group
```{r}
# Use by() function (in base R) to calculate summary statistics by Group
by(TLC[, c("lead0", "lead1", "lead4", "lead6")], TLC[, "group"], FUN = summary)
```

### Calculate summary statistics for all BLL data (not as groups)
```{r}
lead_all <- c(TLC$lead0, TLC$lead1, TLC$lead4, TLC$lead6)
summary(lead_all) #print summary statistics
```

If youâ€™re in need of even more summary statistics you can use the stat.desc package from the pastecs library.stat.desc provides you with the additional following descriptive statistics: the number of values (nbr.val), the number of null values (nbr.null), the number of missing values (nbr.na), the minimal value (min), the maximal value (max), the range (range, that is, max-min) and the sum of all non-missing values (sum), the median (median), the mean (mean), the standard error on the mean (SE.mean), the confidence interval of
the mean (CI.mean) at the p level, the variance (var), the standard deviation (std.dev) and the variation coefficient (coef.var) defined as the standard deviation divided by the mean.
```{r}
### Calculate summary statistics by group
library(pastecs)
# Use by() function (in base R) to calculate summary statistics by Group
by(TLC[, c("lead0", "lead1", "lead4", "lead6")], TLC[, "group"], FUN = stat.desc)
```

What do you observe in the variance-covariance matrices below? What happens when the units change?
Write 1-3 sentences.
```{r}
### Covariance Matrix for lead levels in ug/dL
round(cov(TLC[, c("lead0", "lead1", "lead4", "lead6")]), 5)
### Correlation Matrix for lead levels in mg/dL
round(cov(TLC[, c("lead0", "lead1", "lead4", "lead6")] * 10^-3), 6)
```

What do you observe in the correlation matrices below? Write 1-3 sentences.
```{r}
### Correlation Matrix for lead levels in ug/dL
round(cor(TLC[, c("lead0", "lead1", "lead4", "lead6")]), 3)
### Correlation Matrix for lead levels in mg/dL
round(cor(TLC[, c("lead0", "lead1", "lead4", "lead6")] * 10^-3), 3)
```
