[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Longitudinal Tutorial",
    "section": "",
    "text": "Welcome\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2\n\n\nclustered data"
  },
  {
    "objectID": "Longi_EDA.html#long-and-wide-format",
    "href": "Longi_EDA.html#long-and-wide-format",
    "title": "1  Exploratory Data Analysis",
    "section": "1.1 Long and wide format",
    "text": "1.1 Long and wide format"
  },
  {
    "objectID": "Longi_GEE.html#package",
    "href": "Longi_GEE.html#package",
    "title": "2  Marginal Model (GEE)",
    "section": "2.1 Package",
    "text": "2.1 Package"
  },
  {
    "objectID": "Longi_modelselection.html#backward-forward-stepwise-model-selection",
    "href": "Longi_modelselection.html#backward-forward-stepwise-model-selection",
    "title": "6  Model Selection",
    "section": "6.1 Backward, Forward, Stepwise Model Selection",
    "text": "6.1 Backward, Forward, Stepwise Model Selection"
  },
  {
    "objectID": "Longi_interpretation.html#intercept",
    "href": "Longi_interpretation.html#intercept",
    "title": "8  Interpretation",
    "section": "8.1 Intercept",
    "text": "8.1 Intercept"
  },
  {
    "objectID": "Longi_noncontinuous.html#binary-outcome",
    "href": "Longi_noncontinuous.html#binary-outcome",
    "title": "9  Models for Non-Continuous Outcomes (Longitudinal)",
    "section": "9.1 Binary Outcome",
    "text": "9.1 Binary Outcome"
  },
  {
    "objectID": "Longi_noncontinuous.html#count-outcome",
    "href": "Longi_noncontinuous.html#count-outcome",
    "title": "9  Models for Non-Continuous Outcomes (Longitudinal)",
    "section": "9.2 Count Outcome",
    "text": "9.2 Count Outcome"
  },
  {
    "objectID": "Multi_EDA.html#visualization",
    "href": "Multi_EDA.html#visualization",
    "title": "12  Exploratory Data Analysis",
    "section": "12.1 Visualization",
    "text": "12.1 Visualization"
  },
  {
    "objectID": "Multi_noncontinuous.html#binary-outcome",
    "href": "Multi_noncontinuous.html#binary-outcome",
    "title": "19  Models for Non-Continuous Outcomes (Multilevel)",
    "section": "19.1 Binary Outcome",
    "text": "19.1 Binary Outcome"
  },
  {
    "objectID": "Multi_noncontinuous.html#count-outcome",
    "href": "Multi_noncontinuous.html#count-outcome",
    "title": "19  Models for Non-Continuous Outcomes (Multilevel)",
    "section": "19.2 Count Outcome",
    "text": "19.2 Count Outcome"
  },
  {
    "objectID": "Longi_intro.html#data-structure",
    "href": "Longi_intro.html#data-structure",
    "title": "Longitudinal Data Analysis",
    "section": "Data Structure",
    "text": "Data Structure\n\nsuppressPackageStartupMessages(library(tidyr))\nsuppressPackageStartupMessages(library(data.table))\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(haven))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(GGally))\nsuppressPackageStartupMessages(library(kableExtra))\n\nThe most important part of any statistical analysis begins with loading the data into Rstudio. Data can come in many forms with two popular ones being csv (comma separated values) and dta. Below we show different methods for how to load the data into RStudio.\n\nLoading CSV files\n\nUsing base R\nThe following method is a pretty standard way of loading csv files into R. It requires no external packages (this is already a base R function) and works as follows. First, specify the location of your data, and put it into function as an input.\n\nTLC &lt;- read.csv(\"Data/TLC.csv\")\n\nWe can then get a look at the data by using the head function which provides us with a sneak peek of the first n rows.\n\nhead(TLC, n = 10)\n\n   id lead0 lead1 lead4 lead6     group\n1   1  30.8  26.9  25.8  23.8   Placebo\n2   2  26.5  14.8  19.5  21.0 Treatment\n3   3  25.8  23.0  19.1  23.2 Treatment\n4   4  24.7  24.5  22.0  22.5   Placebo\n5   5  20.4   2.8   3.2   9.4 Treatment\n6   6  20.4   5.4   4.5  11.9 Treatment\n7   7  28.6  20.8  19.2  18.4   Placebo\n8   8  33.7  31.6  28.5  25.1   Placebo\n9   9  19.7  14.9  15.3  14.7   Placebo\n10 10  31.1  31.2  29.2  30.1   Placebo\n\n\n\n\nUsing the readr package\nThe next method requires the use of the readr package. It works exactly the same as read.csv, save for the fact that it is faster than read.csv.\n\nlibrary(readr)\nTLC &lt;- read_csv(\"Data/TLC.csv\")\n\nWe can also print the first few rows to take a look of our data using function head, here we print the first 10 rows of the data.\n\nhead(TLC, n = 10)\n\n# A tibble: 10 × 6\n      id lead0 lead1 lead4 lead6 group    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    \n 1     1  30.8 26.9   25.8 23.8  Placebo  \n 2     2  26.5 14.8   19.5 21    Treatment\n 3     3  25.8 23     19.1 23.2  Treatment\n 4     4  24.7 24.5   22   22.5  Placebo  \n 5     5  20.4  2.8    3.2  9.40 Treatment\n 6     6  20.4  5.40   4.5 11.9  Treatment\n 7     7  28.6 20.8   19.2 18.4  Placebo  \n 8     8  33.7 31.6   28.5 25.1  Placebo  \n 9     9  19.7 14.9   15.3 14.7  Placebo  \n10    10  31.1 31.2   29.2 30.1  Placebo  \n\n\n\n\nUsing the data.table package\nIf we have large datasets, we can use the fread function in the data.table package to read the data faster compared to the other methods above, and we print the first 5 rows of the data.\n\nlibrary(data.table)\nTLC &lt;- fread(\"Data/TLC.csv\")\nhead(TLC, n = 5)\n\n      id lead0 lead1 lead4 lead6     group\n   &lt;int&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;    &lt;char&gt;\n1:     1  30.8  26.9  25.8  23.8   Placebo\n2:     2  26.5  14.8  19.5  21.0 Treatment\n3:     3  25.8  23.0  19.1  23.2 Treatment\n4:     4  24.7  24.5  22.0  22.5   Placebo\n5:     5  20.4   2.8   3.2   9.4 Treatment\n\n\n\n\n\nLoading dta files\nWe can also read files in other formats from other software (STATA, SPSS, SAS, etc). Here we will explore reading dta files which is used in STATA software. In order to load these into Rstudio we need to use a package known as haven. The haven package has a function known as read_dta() which serves a similar purpose as read.csv(), read_csv() and fread().\n\nTLCdta &lt;- read_dta(\"Data/TLC.dta\")\nhead(TLCdta, n = 15)\n\n# A tibble: 15 × 6\n      id lead0 lead1 lead4 lead6 group    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    \n 1     1  30.8 26.9  25.8  23.8  Placebo  \n 2     2  26.5 14.8  19.5  21    Treatment\n 3     3  25.8 23    19.1  23.2  Treatment\n 4     4  24.7 24.5  22    22.5  Placebo  \n 5     5  20.4  2.80  3.20  9.40 Treatment\n 6     6  20.4  5.40  4.5  11.9  Treatment\n 7     7  28.6 20.8  19.2  18.4  Placebo  \n 8     8  33.7 31.6  28.5  25.1  Placebo  \n 9     9  19.7 14.9  15.3  14.7  Placebo  \n10    10  31.1 31.2  29.2  30.1  Placebo  \n11    11  19.8 17.5  20.5  27.5  Placebo  \n12    12  24.8 23.1  24.6  30.9  Treatment\n13    13  21.4 26.3  19.5  19    Placebo  \n14    14  27.9  6.30 18.5  16.3  Treatment\n15    15  21.1 20.3  18.4  20.8  Placebo"
  },
  {
    "objectID": "Longi_intro.html#converting-between-data-formats-wide-and-long-format",
    "href": "Longi_intro.html#converting-between-data-formats-wide-and-long-format",
    "title": "Longitudinal Data Analysis",
    "section": "Converting between data formats (wide and long format)",
    "text": "Converting between data formats (wide and long format)\nFor the most part there are two formats that your data can come in. The wide format and the long format. The long format is when patients within the data have more than one observation. In other words, each row is snapshot into a subject’s history at a specific time point. In the case of our data, each subject has four observations corresponding to their four lead measurements (initial measurement, 1 week measurement, 4 week measurement, and 6 week measurement). The code below details how to convert from wide format to long format.\nThe arguments to gather():\n\ndata: Data object (e.g. the data object here is TLC).\nkey: Name of new key column (made from names of data columns).\nvalue: Name of new value column.\n...: Names of source columns that contain values.\nfactor_key: Treat the new key column as a factor (instead of character vector).\n\nThen, we print the first 16 rows of the long format TLC data.\n\nlong_TLC &lt;- tidyr::gather(TLC, level, measurements, lead0:lead6, factor_key = TRUE)\nlong_TLC &lt;- long_TLC[order(long_TLC$id), ]\nhead(long_TLC, n = 16)\n\n    id     group level measurements\n1    1   Placebo lead0         30.8\n101  1   Placebo lead1         26.9\n201  1   Placebo lead4         25.8\n301  1   Placebo lead6         23.8\n2    2 Treatment lead0         26.5\n102  2 Treatment lead1         14.8\n202  2 Treatment lead4         19.5\n302  2 Treatment lead6         21.0\n3    3 Treatment lead0         25.8\n103  3 Treatment lead1         23.0\n203  3 Treatment lead4         19.1\n303  3 Treatment lead6         23.2\n4    4   Placebo lead0         24.7\n104  4   Placebo lead1         24.5\n204  4   Placebo lead4         22.0\n304  4   Placebo lead6         22.5\n\n\nThe wide format is when each row corresponds to a unique subject. The below shows one how to convert from long format to wide.\nThe arguments to spread():\n\ndata: Data object.\nkey: Name of column containing the new column names.\nvalue: Name of column containing values.\n\nThen, we print the first 10 rows of the converted wide format TLC data which should be same as our original data.\n\nwide_TLC &lt;- spread(long_TLC, level, measurements)\nhead(wide_TLC, n = 10)\n\n   id     group lead0 lead1 lead4 lead6\n1   1   Placebo  30.8  26.9  25.8  23.8\n2   2 Treatment  26.5  14.8  19.5  21.0\n3   3 Treatment  25.8  23.0  19.1  23.2\n4   4   Placebo  24.7  24.5  22.0  22.5\n5   5 Treatment  20.4   2.8   3.2   9.4\n6   6 Treatment  20.4   5.4   4.5  11.9\n7   7   Placebo  28.6  20.8  19.2  18.4\n8   8   Placebo  33.7  31.6  28.5  25.1\n9   9   Placebo  19.7  14.9  15.3  14.7\n10 10   Placebo  31.1  31.2  29.2  30.1"
  },
  {
    "objectID": "Longi_EDA.html#converting-between-data-formats-wide-and-long-format",
    "href": "Longi_EDA.html#converting-between-data-formats-wide-and-long-format",
    "title": "1  Exploratory Data Analysis",
    "section": "1.1 Converting between data formats (wide and long format)",
    "text": "1.1 Converting between data formats (wide and long format)\nFor the most part there are two formats that your data can come in. The wide format and the long format. The long format is when patients within the data have more than one observation. In other words, each row is snapshot into a subject’s history at a specific time point. In the case of our data, each subject has four observations corresponding to their four lead measurements (initial measurement, 1 week measurement, 4 week measurement, and 6 week measurement). The code below details how to convert from wide format to long format.\nThe arguments to gather():\n\ndata: Data object (e.g. the data object here is TLC).\nkey: Name of new key column (made from names of data columns).\nvalue: Name of new value column.\n...: Names of source columns that contain values.\nfactor_key: Treat the new key column as a factor (instead of character vector).\n\nThen, we print the first 16 rows of the long format TLC data.\n\nlong_TLC &lt;- tidyr::gather(TLC, level, measurements, lead0:lead6, factor_key = TRUE)\nlong_TLC &lt;- long_TLC[order(long_TLC$id), ]\nhead(long_TLC, n = 16)\n\n    id     group level measurements\n1    1   Placebo lead0         30.8\n101  1   Placebo lead1         26.9\n201  1   Placebo lead4         25.8\n301  1   Placebo lead6         23.8\n2    2 Treatment lead0         26.5\n102  2 Treatment lead1         14.8\n202  2 Treatment lead4         19.5\n302  2 Treatment lead6         21.0\n3    3 Treatment lead0         25.8\n103  3 Treatment lead1         23.0\n203  3 Treatment lead4         19.1\n303  3 Treatment lead6         23.2\n4    4   Placebo lead0         24.7\n104  4   Placebo lead1         24.5\n204  4   Placebo lead4         22.0\n304  4   Placebo lead6         22.5\n\n\nThe wide format is when each row corresponds to a unique subject. The below shows one how to convert from long format to wide.\nThe arguments to spread():\n\ndata: Data object.\nkey: Name of column containing the new column names.\nvalue: Name of column containing values.\n\nThen, we print the first 10 rows of the converted wide format TLC data which should be same as our original data.\n\nwide_TLC &lt;- spread(long_TLC, level, measurements)\nhead(wide_TLC, n = 10)\n\n   id     group lead0 lead1 lead4 lead6\n1   1   Placebo  30.8  26.9  25.8  23.8\n2   2 Treatment  26.5  14.8  19.5  21.0\n3   3 Treatment  25.8  23.0  19.1  23.2\n4   4   Placebo  24.7  24.5  22.0  22.5\n5   5 Treatment  20.4   2.8   3.2   9.4\n6   6 Treatment  20.4   5.4   4.5  11.9\n7   7   Placebo  28.6  20.8  19.2  18.4\n8   8   Placebo  33.7  31.6  28.5  25.1\n9   9   Placebo  19.7  14.9  15.3  14.7\n10 10   Placebo  31.1  31.2  29.2  30.1"
  },
  {
    "objectID": "Longi_EDA.html#data-structure",
    "href": "Longi_EDA.html#data-structure",
    "title": "1  Exploratory Data Analysis",
    "section": "1.2 Data Structure",
    "text": "1.2 Data Structure\nFor the most part there are two formats that your data can come in. The wide format and the long format. The long format is when patients within the data have more than one observation. In other words, each row is snapshot into a subject’s history at a specific time point. In the case of our data, each subject has four observations corresponding to their four lead measurements (initial measurement, 1 week measurement, 4 week measurement, and 6 week measurement). The code below details how to convert from wide format to long format.\nThe arguments to gather():\n\ndata: Data object (e.g. the data object here is TLC).\nkey: Name of new key column (made from names of data columns).\nvalue: Name of new value column.\n...: Names of source columns that contain values.\nfactor_key: Treat the new key column as a factor (instead of character vector).\n\nThen, we print the first 16 rows of the long format TLC data.\n\nlong_TLC &lt;- tidyr::gather(TLC, level, measurements, lead0:lead6, factor_key = TRUE)\nlong_TLC &lt;- long_TLC[order(long_TLC$id), ]\nhead(long_TLC, n = 16)\n\n    id     group level measurements\n1    1   Placebo lead0         30.8\n101  1   Placebo lead1         26.9\n201  1   Placebo lead4         25.8\n301  1   Placebo lead6         23.8\n2    2 Treatment lead0         26.5\n102  2 Treatment lead1         14.8\n202  2 Treatment lead4         19.5\n302  2 Treatment lead6         21.0\n3    3 Treatment lead0         25.8\n103  3 Treatment lead1         23.0\n203  3 Treatment lead4         19.1\n303  3 Treatment lead6         23.2\n4    4   Placebo lead0         24.7\n104  4   Placebo lead1         24.5\n204  4   Placebo lead4         22.0\n304  4   Placebo lead6         22.5\n\n\nThe wide format is when each row corresponds to a unique subject. The below shows one how to convert from long format to wide.\nThe arguments to spread():\n\ndata: Data object.\nkey: Name of column containing the new column names.\nvalue: Name of column containing values.\n\nThen, we print the first 10 rows of the converted wide format TLC data which should be same as our original data.\n\nwide_TLC &lt;- spread(long_TLC, level, measurements)\nhead(wide_TLC, n = 10)\n\n   id     group lead0 lead1 lead4 lead6\n1   1   Placebo  30.8  26.9  25.8  23.8\n2   2 Treatment  26.5  14.8  19.5  21.0\n3   3 Treatment  25.8  23.0  19.1  23.2\n4   4   Placebo  24.7  24.5  22.0  22.5\n5   5 Treatment  20.4   2.8   3.2   9.4\n6   6 Treatment  20.4   5.4   4.5  11.9\n7   7   Placebo  28.6  20.8  19.2  18.4\n8   8   Placebo  33.7  31.6  28.5  25.1\n9   9   Placebo  19.7  14.9  15.3  14.7\n10 10   Placebo  31.1  31.2  29.2  30.1"
  },
  {
    "objectID": "Longi_EDA.html#graphical-representation-of-longitudinal-data",
    "href": "Longi_EDA.html#graphical-representation-of-longitudinal-data",
    "title": "1  Exploratory Data Analysis",
    "section": "1.2 Graphical Representation of Longitudinal Data",
    "text": "1.2 Graphical Representation of Longitudinal Data\nIn this section we will create some visual representations of the data. While this is possible to do in base R, we will use ggplot. The plots look nicer and it is a reliable tool for making data visualizations. We will begin by plotting the blood lead level (BLL) trajectories for the first seven subjects.\n\n1.2.1 Individual Trajectory Plot\nWe need to utilize ggplot package to graph the individual trajectory plot. Before that, we firstly make some modification on our data. We create a new numeric column named time corresponding to the level column which represents the number of weeks for the measurement as our x-axis timing variable. Next, we convert the id column into factor so we can have each individual as a group.\n\n# create a new numeric timing variable\nlong_TLC$time &lt;- c(0, 1, 4, 6)[long_TLC$level]\n\n# convert the id column into factor for grouping\nlong_TLC$id &lt;- as.factor(long_TLC$id)\n\nNext, we are reading to graph the individual trajectory plot, and we only focus on the first 7 id’s individual.\n\n# create plot\nlead_trajectories &lt;- ggplot(data = long_TLC[(long_TLC[,\"id\"] %in% 1:7), ]) + #only focus on id's 1-7\n  geom_line(aes(x = time, y = measurements, color = id, group = id),size = 1.7) + \n  theme(axis.line = element_line(colour = \"black\", size = 2),\n        text = element_text(size = 20),\n        axis.text = element_text(colour = \"black\", size = 16, face = \"bold\"),\n        axis.title = element_text(size = 16, face=\"bold\"),\n        axis.ticks.length = unit(.25, \"cm\"),\n        axis.ticks = element_line(colour = \"black\", size = 1.5),\n        legend.background = element_blank()) +\n  scale_color_manual(name = \"ID\", values = c(\"green\", \"red\", \"purple\", \"blue\",\n                                             \"yellow\", \"pink\", \"orange\"),\n                     labels = sapply(1:7, function(x) paste0(\"id\", \" = \", x))) +\n  ylab(~ paste(\"Blood Lead levels (\", mu, \"g/dL)\")) +\n  xlab(\"Time (weeks)\")\n\n# print the individual trajectory plot\nprint(lead_trajectories)\n\n\n\n\n\n\n\n\n\n\n1.2.2 Scatter Plot\nNext, we create a scatter plot to evaluate BLL over time. We stratify the data by group.\n\nlong_TLC$factor_time &lt;- as.factor(long_TLC$time)\n\n#create plot\nlead_point_plot &lt;- ggplot(long_TLC, \n                          aes(x = factor_time, y = measurements, color = group)) + \n  geom_point() + \n  facet_wrap(.~group) + # this allows us to make separate boxes for the groups\n  theme(axis.line = element_line(colour = \"black\", size = 2),\n        text = element_text(size = 20),\n        axis.text = element_text(colour = \"black\", size = 16, face=\"bold\"),\n        axis.title = element_text(size = 16, face = \"bold\"),\n        axis.ticks.length=unit(.25, \"cm\"),\n        axis.ticks = element_line(colour = \"black\", size = 1.5)) + \n  ylab(~ paste(\"Blood Lead levels (\", mu, \"g/dL)\")) + \n  xlab(\"Time (weeks)\")\n\n# print the scatter plot\nprint(lead_point_plot)\n\n\n\n\n\n\n\n\n\n\n1.2.3 Mean Plot\nTo plot averages over time, we first summarize the data. Here we summarize count, mean, standard deviation (SD) and variance of blood lead levels over time (or for each occasion).\n\n#create table summarizing the blood lead levels\nlead_overall_summary &lt;- long_TLC %&gt;%\n  group_by(time) %&gt;% #CHECK\n  summarise(n = (length(measurements) - sum(is.na(measurements))),\n            mean = round(mean(measurements, na.rm = T), 3),\n            sd = round(sd(measurements, na.rm = T), 3),\n            var = round(var(measurements, na.rm = T), 3))\n\n#output table for overall averages\nlead_overall_summary %&gt;%\n  mutate_all(linebreak) %&gt;%\n  kbl(caption = \"Summary of average lead levels from TLC study\",\n      col.names=linebreak(c(\"Time\",\"N\", \"Mean\", \"SD\", \"Variance\")),\n      booktabs=T, escape=F, align = \"c\") %&gt;%\n  kable_styling(full_width = FALSE, latex_options = c('hold_position'))\n\n\nSummary of average lead levels from TLC study\n\n\nTime\nN\nMean\nSD\nVariance\n\n\n\n\n0\n100\n26.406\n4.999\n24.989\n\n\n1\n100\n19.091\n8.673\n75.225\n\n\n4\n100\n19.792\n8.086\n65.385\n\n\n6\n100\n22.204\n7.756\n60.159\n\n\n\n\n\n\n\nNext, we create a plot of means.\n\nlead_mean_plot &lt;- ggplot(data = lead_overall_summary, aes(x = time, y = mean)) +\n    geom_point(size = 2) + geom_line(size = 2) + ylab(~paste(\"Lead levels (\", mu,\n    \"g/dL)\")) + xlab(\"Time (weeks)\")\n\n# print the mean plot\nprint(lead_mean_plot)\n\n\n\n\n\n\n\n\n\n\n1.2.4 Box Plot\nAnother helpful method of visualizing the data is to use a boxplot. A boxplot is a standardized way of displaying the distribution of data based on five statistics: The minimum (bottom line), the 1st quartile (bottom of the box), the median (the line inside the box), the 3rd quartile (top of the box) and the maximum (top line). Sometimes you will encounter values that are above the maximum or below the minimum. These are known as outliers. This theoretically shouldn’t be true, but it occurs due to how the min and max are defined. The maximum is defined as the third quartile plus 1.5 times the InterQuartile Range (3rd quartile minus 1st quartile), and the minimum is defined as the 1st quartile minus 1.5 times the IQR.\n\nlead_box_plot &lt;- ggplot(long_TLC, aes(x = factor_time, y = measurements, fill = group)) +\n  geom_boxplot() +\n  facet_wrap(.~group) + #this is what allows us to make separate boxes for the groups\n  theme(axis.line = element_line(colour = \"black\", linewidth = 2),\n        text = element_text(size = 20),\n        axis.text = element_text(colour = \"black\", size = 20, face = \"bold\"),\n        axis.title = element_text(size = 24, face =\"bold\"),\n        axis.ticks.length=unit(.25, \"cm\"),\n        axis.ticks = element_line(colour = \"black\", linewidth = 1.5)) +\n  ylab(~ paste(\" Lead levels ( \", mu, \"g/dL )\")) +\n  xlab(\"Time (weeks)\")\n\n# print the boxplot\nprint(lead_box_plot)\n\n\n\n\n\n\n\n\n\n\n1.2.5 Correlation Plot\nNext, we can create a correlation plot using GGally package.\n\nggpairs(TLC, columns = c(2:5))"
  },
  {
    "objectID": "Longi_EDA.html#descriptive-statistics-for-longitudinal-data",
    "href": "Longi_EDA.html#descriptive-statistics-for-longitudinal-data",
    "title": "1  Exploratory Data Analysis",
    "section": "1.3 Descriptive statistics for longitudinal data",
    "text": "1.3 Descriptive statistics for longitudinal data\nIn this section we will calculate some summary statistics for our continuous covariates. For simplicity I will be using the wide format of the data since every observation (i.e. row) will correspond to a unique id. There are many functions in R which will calculate any type of summary statistics you can think of. The most general is the summary() function in base R which calculates the minimum, 1st Quartile (25% Percentile), Median, Mean, 3rd Quartile (75%) and Maximum.\n\n1.3.1 Calculate summary statistics by group\n\n# Use by() function (in base R) to calculate summary statistics by Group\nby(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")], TLC[, \"group\"], FUN = summary)\n\nTLC[, \"group\"]: Placebo\n     lead0           lead1           lead4           lead6      \n Min.   :19.70   Min.   :14.90   Min.   :15.30   Min.   :13.50  \n 1st Qu.:21.88   1st Qu.:20.93   1st Qu.:19.82   1st Qu.:19.95  \n Median :25.25   Median :24.10   Median :22.45   Median :22.35  \n Mean   :26.27   Mean   :24.66   Mean   :24.07   Mean   :23.65  \n 3rd Qu.:29.73   3rd Qu.:27.82   3rd Qu.:27.45   3rd Qu.:27.50  \n Max.   :38.10   Max.   :40.80   Max.   :38.60   Max.   :43.30  \n------------------------------------------------------------ \nTLC[, \"group\"]: Treatment\n     lead0           lead1            lead4            lead6      \n Min.   :19.70   Min.   : 2.800   Min.   : 3.000   Min.   : 4.10  \n 1st Qu.:22.12   1st Qu.: 7.225   1st Qu.: 9.125   1st Qu.:15.40  \n Median :26.20   Median :12.250   Median :15.350   Median :18.85  \n Mean   :26.54   Mean   :13.522   Mean   :15.514   Mean   :20.76  \n 3rd Qu.:29.55   3rd Qu.:17.500   3rd Qu.:19.725   3rd Qu.:23.75  \n Max.   :41.10   Max.   :39.000   Max.   :40.400   Max.   :63.90  \n\n\n\n\n1.3.2 Calculate summary statistics for all BLL data (not as groups)\n\nlead_all &lt;- c(TLC$lead0, TLC$lead1, TLC$lead4, TLC$lead6)\nsummary(lead_all)  #print summary statistics\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2.80   17.50   21.90   21.87   26.73   63.90 \n\n\nIf you’re in need of even more summary statistics you can use the stat.desc package from the pastecs library.stat.desc provides you with the additional following descriptive statistics: the number of values (nbr.val), the number of null values (nbr.null), the number of missing values (nbr.na), the minimal value (min), the maximal value (max), the range (range, that is, max-min) and the sum of all non-missing values (sum), the median (median), the mean (mean), the standard error on the mean (SE.mean), the confidence interval of the mean (CI.mean) at the p level, the variance (var), the standard deviation (std.dev) and the variation coefficient (coef.var) defined as the standard deviation divided by the mean.\n\n### Calculate summary statistics by group\nlibrary(pastecs)\n# Use by() function (in base R) to calculate summary statistics by Group\nby(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")], TLC[, \"group\"], FUN = stat.desc)\n\nTLC[, \"group\"]: Placebo\n                    lead0        lead1        lead4        lead6\nnbr.val        50.0000000   50.0000000   50.0000000   50.0000000\nnbr.null        0.0000000    0.0000000    0.0000000    0.0000000\nnbr.na          0.0000000    0.0000000    0.0000000    0.0000000\nmin            19.7000010   14.9000000   15.3000000   13.5000000\nmax            38.0999980   40.7999990   38.5999980   43.2999990\nrange          18.3999970   25.8999990   23.2999980   29.7999990\nsum          1313.5999970 1232.9999970 1203.5000030 1182.2999980\nmedian         25.2500000   24.0999995   22.4500010   22.3500005\nmean           26.2719999   24.6599999   24.0700001   23.6460000\nSE.mean         0.7105160    0.7723275    0.8136150    0.7975893\nCI.mean.0.95    1.4278353    1.5520502    1.6350205    1.6028157\nvar            25.2416481   29.8244892   33.0984669   31.8074323\nstd.dev         5.0241067    5.4611802    5.7531267    5.6398078\ncoef.var        0.1912343    0.2214591    0.2390165    0.2385100\n------------------------------------------------------------ \nTLC[, \"group\"]: Treatment\n                    lead0       lead1       lead4        lead6\nnbr.val        50.0000000  50.0000000  50.0000000   50.0000000\nnbr.null        0.0000000   0.0000000   0.0000000    0.0000000\nnbr.na          0.0000000   0.0000000   0.0000000    0.0000000\nmin            19.7000010   2.8000000   3.0000000    4.0999999\nmax            41.0999980  39.0000000  40.4000020   63.9000020\nrange          21.3999970  36.2000000  37.4000020   59.8000021\nsum          1326.9999960 676.0999983 775.6999992 1038.1000055\nmedian         26.2000000  12.2500000  15.3500000   18.8499995\nmean           26.5399999  13.5220000  15.5140000   20.7620001\nSE.mean         0.7100675   1.0850535   1.1104697    1.3076288\nCI.mean.0.95    1.4269341   2.1804967   2.2315724    2.6277784\nvar            25.2097935  58.8670567  61.6571480   85.4946530\nstd.dev         5.0209355   7.6724870   7.8522066    9.2463319\ncoef.var        0.1891837   0.5674077   0.5061368    0.4453488\n\n\nWhat do you observe in the variance-covariance matrices below? What happens when the units change? Write 1-3 sentences.\n\n### Covariance Matrix for lead levels in ug/dL\nround(cov(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")]), 5)\n\n         lead0    lead1    lead4    lead6\nlead0 24.98905 18.16066 18.92146 21.78220\nlead1 18.16066 75.22487 59.24104 37.48690\nlead4 18.92146 59.24104 65.38539 36.54235\nlead6 21.78220 37.48690 36.54235 60.15898\n\n### Correlation Matrix for lead levels in mg/dL\nround(cov(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")] * 10^-3), 6)\n\n        lead0   lead1   lead4   lead6\nlead0 2.5e-05 1.8e-05 1.9e-05 2.2e-05\nlead1 1.8e-05 7.5e-05 5.9e-05 3.7e-05\nlead4 1.9e-05 5.9e-05 6.5e-05 3.7e-05\nlead6 2.2e-05 3.7e-05 3.7e-05 6.0e-05\n\n\nWhat do you observe in the correlation matrices below? Write 1-3 sentences.\n\n### Correlation Matrix for lead levels in ug/dL\nround(cor(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")]), 3)\n\n      lead0 lead1 lead4 lead6\nlead0 1.000 0.419 0.468 0.562\nlead1 0.419 1.000 0.845 0.557\nlead4 0.468 0.845 1.000 0.583\nlead6 0.562 0.557 0.583 1.000\n\n### Correlation Matrix for lead levels in mg/dL\nround(cor(TLC[, c(\"lead0\", \"lead1\", \"lead4\", \"lead6\")] * 10^-3), 3)\n\n      lead0 lead1 lead4 lead6\nlead0 1.000 0.419 0.468 0.562\nlead1 0.419 1.000 0.845 0.557\nlead4 0.468 0.845 1.000 0.583\nlead6 0.562 0.557 0.583 1.000"
  }
]